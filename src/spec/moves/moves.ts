/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * PokéAPI
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.

## What is this?

This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.

We've covered everything from Pokémon to Berry Flavors.

## Where do I start?

We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.

This API will always be publicly available and will never require any extensive setup process to consume.

Created by [**Paul Hallett**](https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
    
 * OpenAPI spec version: 2.7.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  MoveAilmentListParams,
  MoveBattleStyleDetail,
  MoveBattleStyleListParams,
  MoveCategoryListParams,
  MoveDetail,
  MoveLearnMethodDetail,
  MoveLearnMethodListParams,
  MoveListParams,
  MoveMetaAilmentDetail,
  MoveMetaCategoryDetail,
  MoveTargetDetail,
  MoveTargetListParams,
  PaginatedMoveBattleStyleSummaryList,
  PaginatedMoveLearnMethodSummaryList,
  PaginatedMoveMetaAilmentSummaryList,
  PaginatedMoveMetaCategorySummaryList,
  PaginatedMoveSummaryList,
  PaginatedMoveTargetSummaryList
} from '.././model';





/**
 * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
 * @summary List moves
 */
export type moveListResponse200 = {
  data: PaginatedMoveSummaryList
  status: 200
}
    
export type moveListResponseComposite = moveListResponse200;
    
export type moveListResponse = moveListResponseComposite & {
  headers: Headers;
}

export const getMoveListUrl = (params?: MoveListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/move/?${stringifiedParams}` : `https://pokeapi.co/api/v2/move/`
}

export const moveList = async (params?: MoveListParams, options?: RequestInit): Promise<moveListResponse> => {
  
  const res = await fetch(getMoveListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveListResponse
}



export const getMoveListQueryKey = (params?: MoveListParams,) => {
    return [`https://pokeapi.co/api/v2/move/`, ...(params ? [params]: [])] as const;
    }

    
export const getMoveListQueryOptions = <TData = Awaited<ReturnType<typeof moveList>>, TError = unknown>(params?: MoveListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveList>>> = ({ signal }) => moveList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveListQueryResult = NonNullable<Awaited<ReturnType<typeof moveList>>>
export type MoveListQueryError = unknown


export function useMoveList<TData = Awaited<ReturnType<typeof moveList>>, TError = unknown>(
 params: undefined |  MoveListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveList>>,
          TError,
          Awaited<ReturnType<typeof moveList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveList<TData = Awaited<ReturnType<typeof moveList>>, TError = unknown>(
 params?: MoveListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveList>>,
          TError,
          Awaited<ReturnType<typeof moveList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveList<TData = Awaited<ReturnType<typeof moveList>>, TError = unknown>(
 params?: MoveListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List moves
 */

export function useMoveList<TData = Awaited<ReturnType<typeof moveList>>, TError = unknown>(
 params?: MoveListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Moves are the skills of Pokémon in battle. In battle, a Pokémon uses one move each turn. Some moves (including those learned by Hidden Machine) can be used outside of battle as well, usually for the purpose of removing obstacles or exploring new areas.
 * @summary Get move
 */
export type moveRetrieveResponse200 = {
  data: MoveDetail
  status: 200
}
    
export type moveRetrieveResponseComposite = moveRetrieveResponse200;
    
export type moveRetrieveResponse = moveRetrieveResponseComposite & {
  headers: Headers;
}

export const getMoveRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/move/${id}/`
}

export const moveRetrieve = async (id: string, options?: RequestInit): Promise<moveRetrieveResponse> => {
  
  const res = await fetch(getMoveRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveRetrieveResponse
}



export const getMoveRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/move/${id}/`] as const;
    }

    
export const getMoveRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moveRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveRetrieve>>> = ({ signal }) => moveRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moveRetrieve>>>
export type MoveRetrieveQueryError = unknown


export function useMoveRetrieve<TData = Awaited<ReturnType<typeof moveRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveRetrieve<TData = Awaited<ReturnType<typeof moveRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveRetrieve<TData = Awaited<ReturnType<typeof moveRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get move
 */

export function useMoveRetrieve<TData = Awaited<ReturnType<typeof moveRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
 * @summary List move meta ailments
 */
export type moveAilmentListResponse200 = {
  data: PaginatedMoveMetaAilmentSummaryList
  status: 200
}
    
export type moveAilmentListResponseComposite = moveAilmentListResponse200;
    
export type moveAilmentListResponse = moveAilmentListResponseComposite & {
  headers: Headers;
}

export const getMoveAilmentListUrl = (params?: MoveAilmentListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/move-ailment/?${stringifiedParams}` : `https://pokeapi.co/api/v2/move-ailment/`
}

export const moveAilmentList = async (params?: MoveAilmentListParams, options?: RequestInit): Promise<moveAilmentListResponse> => {
  
  const res = await fetch(getMoveAilmentListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveAilmentListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveAilmentListResponse
}



export const getMoveAilmentListQueryKey = (params?: MoveAilmentListParams,) => {
    return [`https://pokeapi.co/api/v2/move-ailment/`, ...(params ? [params]: [])] as const;
    }

    
export const getMoveAilmentListQueryOptions = <TData = Awaited<ReturnType<typeof moveAilmentList>>, TError = unknown>(params?: MoveAilmentListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveAilmentList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveAilmentListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveAilmentList>>> = ({ signal }) => moveAilmentList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveAilmentList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveAilmentListQueryResult = NonNullable<Awaited<ReturnType<typeof moveAilmentList>>>
export type MoveAilmentListQueryError = unknown


export function useMoveAilmentList<TData = Awaited<ReturnType<typeof moveAilmentList>>, TError = unknown>(
 params: undefined |  MoveAilmentListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveAilmentList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveAilmentList>>,
          TError,
          Awaited<ReturnType<typeof moveAilmentList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveAilmentList<TData = Awaited<ReturnType<typeof moveAilmentList>>, TError = unknown>(
 params?: MoveAilmentListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveAilmentList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveAilmentList>>,
          TError,
          Awaited<ReturnType<typeof moveAilmentList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveAilmentList<TData = Awaited<ReturnType<typeof moveAilmentList>>, TError = unknown>(
 params?: MoveAilmentListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveAilmentList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List move meta ailments
 */

export function useMoveAilmentList<TData = Awaited<ReturnType<typeof moveAilmentList>>, TError = unknown>(
 params?: MoveAilmentListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveAilmentList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveAilmentListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Move Ailments are status conditions caused by moves used during battle. See [Bulbapedia](https://bulbapedia.bulbagarden.net/wiki/Status_condition) for greater detail.
 * @summary Get move meta ailment
 */
export type moveAilmentRetrieveResponse200 = {
  data: MoveMetaAilmentDetail
  status: 200
}
    
export type moveAilmentRetrieveResponseComposite = moveAilmentRetrieveResponse200;
    
export type moveAilmentRetrieveResponse = moveAilmentRetrieveResponseComposite & {
  headers: Headers;
}

export const getMoveAilmentRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/move-ailment/${id}/`
}

export const moveAilmentRetrieve = async (id: string, options?: RequestInit): Promise<moveAilmentRetrieveResponse> => {
  
  const res = await fetch(getMoveAilmentRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveAilmentRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveAilmentRetrieveResponse
}



export const getMoveAilmentRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/move-ailment/${id}/`] as const;
    }

    
export const getMoveAilmentRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveAilmentRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveAilmentRetrieve>>> = ({ signal }) => moveAilmentRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveAilmentRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moveAilmentRetrieve>>>
export type MoveAilmentRetrieveQueryError = unknown


export function useMoveAilmentRetrieve<TData = Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveAilmentRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveAilmentRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveAilmentRetrieve<TData = Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveAilmentRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveAilmentRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveAilmentRetrieve<TData = Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get move meta ailment
 */

export function useMoveAilmentRetrieve<TData = Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveAilmentRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveAilmentRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
 * @summary List move battle styles
 */
export type moveBattleStyleListResponse200 = {
  data: PaginatedMoveBattleStyleSummaryList
  status: 200
}
    
export type moveBattleStyleListResponseComposite = moveBattleStyleListResponse200;
    
export type moveBattleStyleListResponse = moveBattleStyleListResponseComposite & {
  headers: Headers;
}

export const getMoveBattleStyleListUrl = (params?: MoveBattleStyleListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/move-battle-style/?${stringifiedParams}` : `https://pokeapi.co/api/v2/move-battle-style/`
}

export const moveBattleStyleList = async (params?: MoveBattleStyleListParams, options?: RequestInit): Promise<moveBattleStyleListResponse> => {
  
  const res = await fetch(getMoveBattleStyleListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveBattleStyleListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveBattleStyleListResponse
}



export const getMoveBattleStyleListQueryKey = (params?: MoveBattleStyleListParams,) => {
    return [`https://pokeapi.co/api/v2/move-battle-style/`, ...(params ? [params]: [])] as const;
    }

    
export const getMoveBattleStyleListQueryOptions = <TData = Awaited<ReturnType<typeof moveBattleStyleList>>, TError = unknown>(params?: MoveBattleStyleListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveBattleStyleListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveBattleStyleList>>> = ({ signal }) => moveBattleStyleList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveBattleStyleListQueryResult = NonNullable<Awaited<ReturnType<typeof moveBattleStyleList>>>
export type MoveBattleStyleListQueryError = unknown


export function useMoveBattleStyleList<TData = Awaited<ReturnType<typeof moveBattleStyleList>>, TError = unknown>(
 params: undefined |  MoveBattleStyleListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveBattleStyleList>>,
          TError,
          Awaited<ReturnType<typeof moveBattleStyleList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveBattleStyleList<TData = Awaited<ReturnType<typeof moveBattleStyleList>>, TError = unknown>(
 params?: MoveBattleStyleListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveBattleStyleList>>,
          TError,
          Awaited<ReturnType<typeof moveBattleStyleList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveBattleStyleList<TData = Awaited<ReturnType<typeof moveBattleStyleList>>, TError = unknown>(
 params?: MoveBattleStyleListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List move battle styles
 */

export function useMoveBattleStyleList<TData = Awaited<ReturnType<typeof moveBattleStyleList>>, TError = unknown>(
 params?: MoveBattleStyleListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveBattleStyleListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Styles of moves when used in the Battle Palace. See [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Battle_Frontier_(Generation_III)) for greater detail.
 * @summary Get move battle style
 */
export type moveBattleStyleRetrieveResponse200 = {
  data: MoveBattleStyleDetail
  status: 200
}
    
export type moveBattleStyleRetrieveResponseComposite = moveBattleStyleRetrieveResponse200;
    
export type moveBattleStyleRetrieveResponse = moveBattleStyleRetrieveResponseComposite & {
  headers: Headers;
}

export const getMoveBattleStyleRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/move-battle-style/${id}/`
}

export const moveBattleStyleRetrieve = async (id: string, options?: RequestInit): Promise<moveBattleStyleRetrieveResponse> => {
  
  const res = await fetch(getMoveBattleStyleRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveBattleStyleRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveBattleStyleRetrieveResponse
}



export const getMoveBattleStyleRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/move-battle-style/${id}/`] as const;
    }

    
export const getMoveBattleStyleRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveBattleStyleRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveBattleStyleRetrieve>>> = ({ signal }) => moveBattleStyleRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveBattleStyleRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moveBattleStyleRetrieve>>>
export type MoveBattleStyleRetrieveQueryError = unknown


export function useMoveBattleStyleRetrieve<TData = Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveBattleStyleRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveBattleStyleRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveBattleStyleRetrieve<TData = Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveBattleStyleRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveBattleStyleRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveBattleStyleRetrieve<TData = Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get move battle style
 */

export function useMoveBattleStyleRetrieve<TData = Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveBattleStyleRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveBattleStyleRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Very general categories that loosely group move effects.
 * @summary List move meta categories
 */
export type moveCategoryListResponse200 = {
  data: PaginatedMoveMetaCategorySummaryList
  status: 200
}
    
export type moveCategoryListResponseComposite = moveCategoryListResponse200;
    
export type moveCategoryListResponse = moveCategoryListResponseComposite & {
  headers: Headers;
}

export const getMoveCategoryListUrl = (params?: MoveCategoryListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/move-category/?${stringifiedParams}` : `https://pokeapi.co/api/v2/move-category/`
}

export const moveCategoryList = async (params?: MoveCategoryListParams, options?: RequestInit): Promise<moveCategoryListResponse> => {
  
  const res = await fetch(getMoveCategoryListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveCategoryListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveCategoryListResponse
}



export const getMoveCategoryListQueryKey = (params?: MoveCategoryListParams,) => {
    return [`https://pokeapi.co/api/v2/move-category/`, ...(params ? [params]: [])] as const;
    }

    
export const getMoveCategoryListQueryOptions = <TData = Awaited<ReturnType<typeof moveCategoryList>>, TError = unknown>(params?: MoveCategoryListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveCategoryList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveCategoryListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveCategoryList>>> = ({ signal }) => moveCategoryList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveCategoryList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveCategoryListQueryResult = NonNullable<Awaited<ReturnType<typeof moveCategoryList>>>
export type MoveCategoryListQueryError = unknown


export function useMoveCategoryList<TData = Awaited<ReturnType<typeof moveCategoryList>>, TError = unknown>(
 params: undefined |  MoveCategoryListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveCategoryList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveCategoryList>>,
          TError,
          Awaited<ReturnType<typeof moveCategoryList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveCategoryList<TData = Awaited<ReturnType<typeof moveCategoryList>>, TError = unknown>(
 params?: MoveCategoryListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveCategoryList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveCategoryList>>,
          TError,
          Awaited<ReturnType<typeof moveCategoryList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveCategoryList<TData = Awaited<ReturnType<typeof moveCategoryList>>, TError = unknown>(
 params?: MoveCategoryListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveCategoryList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List move meta categories
 */

export function useMoveCategoryList<TData = Awaited<ReturnType<typeof moveCategoryList>>, TError = unknown>(
 params?: MoveCategoryListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveCategoryList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveCategoryListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Very general categories that loosely group move effects.
 * @summary Get move meta category
 */
export type moveCategoryRetrieveResponse200 = {
  data: MoveMetaCategoryDetail
  status: 200
}
    
export type moveCategoryRetrieveResponseComposite = moveCategoryRetrieveResponse200;
    
export type moveCategoryRetrieveResponse = moveCategoryRetrieveResponseComposite & {
  headers: Headers;
}

export const getMoveCategoryRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/move-category/${id}/`
}

export const moveCategoryRetrieve = async (id: string, options?: RequestInit): Promise<moveCategoryRetrieveResponse> => {
  
  const res = await fetch(getMoveCategoryRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveCategoryRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveCategoryRetrieveResponse
}



export const getMoveCategoryRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/move-category/${id}/`] as const;
    }

    
export const getMoveCategoryRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveCategoryRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveCategoryRetrieve>>> = ({ signal }) => moveCategoryRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveCategoryRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moveCategoryRetrieve>>>
export type MoveCategoryRetrieveQueryError = unknown


export function useMoveCategoryRetrieve<TData = Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveCategoryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveCategoryRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveCategoryRetrieve<TData = Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveCategoryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveCategoryRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveCategoryRetrieve<TData = Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get move meta category
 */

export function useMoveCategoryRetrieve<TData = Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveCategoryRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveCategoryRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Methods by which Pokémon can learn moves.
 * @summary List move learn methods
 */
export type moveLearnMethodListResponse200 = {
  data: PaginatedMoveLearnMethodSummaryList
  status: 200
}
    
export type moveLearnMethodListResponseComposite = moveLearnMethodListResponse200;
    
export type moveLearnMethodListResponse = moveLearnMethodListResponseComposite & {
  headers: Headers;
}

export const getMoveLearnMethodListUrl = (params?: MoveLearnMethodListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/move-learn-method/?${stringifiedParams}` : `https://pokeapi.co/api/v2/move-learn-method/`
}

export const moveLearnMethodList = async (params?: MoveLearnMethodListParams, options?: RequestInit): Promise<moveLearnMethodListResponse> => {
  
  const res = await fetch(getMoveLearnMethodListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveLearnMethodListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveLearnMethodListResponse
}



export const getMoveLearnMethodListQueryKey = (params?: MoveLearnMethodListParams,) => {
    return [`https://pokeapi.co/api/v2/move-learn-method/`, ...(params ? [params]: [])] as const;
    }

    
export const getMoveLearnMethodListQueryOptions = <TData = Awaited<ReturnType<typeof moveLearnMethodList>>, TError = unknown>(params?: MoveLearnMethodListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveLearnMethodListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveLearnMethodList>>> = ({ signal }) => moveLearnMethodList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveLearnMethodListQueryResult = NonNullable<Awaited<ReturnType<typeof moveLearnMethodList>>>
export type MoveLearnMethodListQueryError = unknown


export function useMoveLearnMethodList<TData = Awaited<ReturnType<typeof moveLearnMethodList>>, TError = unknown>(
 params: undefined |  MoveLearnMethodListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveLearnMethodList>>,
          TError,
          Awaited<ReturnType<typeof moveLearnMethodList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveLearnMethodList<TData = Awaited<ReturnType<typeof moveLearnMethodList>>, TError = unknown>(
 params?: MoveLearnMethodListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveLearnMethodList>>,
          TError,
          Awaited<ReturnType<typeof moveLearnMethodList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveLearnMethodList<TData = Awaited<ReturnType<typeof moveLearnMethodList>>, TError = unknown>(
 params?: MoveLearnMethodListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List move learn methods
 */

export function useMoveLearnMethodList<TData = Awaited<ReturnType<typeof moveLearnMethodList>>, TError = unknown>(
 params?: MoveLearnMethodListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveLearnMethodListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Methods by which Pokémon can learn moves.
 * @summary Get move learn method
 */
export type moveLearnMethodRetrieveResponse200 = {
  data: MoveLearnMethodDetail
  status: 200
}
    
export type moveLearnMethodRetrieveResponseComposite = moveLearnMethodRetrieveResponse200;
    
export type moveLearnMethodRetrieveResponse = moveLearnMethodRetrieveResponseComposite & {
  headers: Headers;
}

export const getMoveLearnMethodRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/move-learn-method/${id}/`
}

export const moveLearnMethodRetrieve = async (id: string, options?: RequestInit): Promise<moveLearnMethodRetrieveResponse> => {
  
  const res = await fetch(getMoveLearnMethodRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveLearnMethodRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveLearnMethodRetrieveResponse
}



export const getMoveLearnMethodRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/move-learn-method/${id}/`] as const;
    }

    
export const getMoveLearnMethodRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveLearnMethodRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveLearnMethodRetrieve>>> = ({ signal }) => moveLearnMethodRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveLearnMethodRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moveLearnMethodRetrieve>>>
export type MoveLearnMethodRetrieveQueryError = unknown


export function useMoveLearnMethodRetrieve<TData = Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveLearnMethodRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveLearnMethodRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveLearnMethodRetrieve<TData = Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveLearnMethodRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveLearnMethodRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveLearnMethodRetrieve<TData = Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get move learn method
 */

export function useMoveLearnMethodRetrieve<TData = Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveLearnMethodRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveLearnMethodRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
 * @summary List move targets
 */
export type moveTargetListResponse200 = {
  data: PaginatedMoveTargetSummaryList
  status: 200
}
    
export type moveTargetListResponseComposite = moveTargetListResponse200;
    
export type moveTargetListResponse = moveTargetListResponseComposite & {
  headers: Headers;
}

export const getMoveTargetListUrl = (params?: MoveTargetListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/move-target/?${stringifiedParams}` : `https://pokeapi.co/api/v2/move-target/`
}

export const moveTargetList = async (params?: MoveTargetListParams, options?: RequestInit): Promise<moveTargetListResponse> => {
  
  const res = await fetch(getMoveTargetListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveTargetListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveTargetListResponse
}



export const getMoveTargetListQueryKey = (params?: MoveTargetListParams,) => {
    return [`https://pokeapi.co/api/v2/move-target/`, ...(params ? [params]: [])] as const;
    }

    
export const getMoveTargetListQueryOptions = <TData = Awaited<ReturnType<typeof moveTargetList>>, TError = unknown>(params?: MoveTargetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveTargetList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveTargetListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveTargetList>>> = ({ signal }) => moveTargetList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveTargetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveTargetListQueryResult = NonNullable<Awaited<ReturnType<typeof moveTargetList>>>
export type MoveTargetListQueryError = unknown


export function useMoveTargetList<TData = Awaited<ReturnType<typeof moveTargetList>>, TError = unknown>(
 params: undefined |  MoveTargetListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveTargetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveTargetList>>,
          TError,
          Awaited<ReturnType<typeof moveTargetList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveTargetList<TData = Awaited<ReturnType<typeof moveTargetList>>, TError = unknown>(
 params?: MoveTargetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveTargetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveTargetList>>,
          TError,
          Awaited<ReturnType<typeof moveTargetList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveTargetList<TData = Awaited<ReturnType<typeof moveTargetList>>, TError = unknown>(
 params?: MoveTargetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveTargetList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List move targets
 */

export function useMoveTargetList<TData = Awaited<ReturnType<typeof moveTargetList>>, TError = unknown>(
 params?: MoveTargetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveTargetList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveTargetListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Targets moves can be directed at during battle. Targets can be Pokémon, environments or even other moves.
 * @summary Get move target
 */
export type moveTargetRetrieveResponse200 = {
  data: MoveTargetDetail
  status: 200
}
    
export type moveTargetRetrieveResponseComposite = moveTargetRetrieveResponse200;
    
export type moveTargetRetrieveResponse = moveTargetRetrieveResponseComposite & {
  headers: Headers;
}

export const getMoveTargetRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/move-target/${id}/`
}

export const moveTargetRetrieve = async (id: string, options?: RequestInit): Promise<moveTargetRetrieveResponse> => {
  
  const res = await fetch(getMoveTargetRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: moveTargetRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as moveTargetRetrieveResponse
}



export const getMoveTargetRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/move-target/${id}/`] as const;
    }

    
export const getMoveTargetRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof moveTargetRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveTargetRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMoveTargetRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof moveTargetRetrieve>>> = ({ signal }) => moveTargetRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof moveTargetRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MoveTargetRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof moveTargetRetrieve>>>
export type MoveTargetRetrieveQueryError = unknown


export function useMoveTargetRetrieve<TData = Awaited<ReturnType<typeof moveTargetRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveTargetRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveTargetRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveTargetRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveTargetRetrieve<TData = Awaited<ReturnType<typeof moveTargetRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveTargetRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof moveTargetRetrieve>>,
          TError,
          Awaited<ReturnType<typeof moveTargetRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMoveTargetRetrieve<TData = Awaited<ReturnType<typeof moveTargetRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveTargetRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get move target
 */

export function useMoveTargetRetrieve<TData = Awaited<ReturnType<typeof moveTargetRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof moveTargetRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMoveTargetRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



