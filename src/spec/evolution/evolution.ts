/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * PokéAPI
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.

## What is this?

This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.

We've covered everything from Pokémon to Berry Flavors.

## Where do I start?

We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.

This API will always be publicly available and will never require any extensive setup process to consume.

Created by [**Paul Hallett**](https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
    
 * OpenAPI spec version: 2.7.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  EvolutionChainDetail,
  EvolutionChainListParams,
  EvolutionTriggerDetail,
  EvolutionTriggerListParams,
  PaginatedEvolutionChainSummaryList,
  PaginatedEvolutionTriggerSummaryList
} from '.././model';





/**
 * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
 * @summary List evolution chains
 */
export type evolutionChainListResponse200 = {
  data: PaginatedEvolutionChainSummaryList
  status: 200
}
    
export type evolutionChainListResponseComposite = evolutionChainListResponse200;
    
export type evolutionChainListResponse = evolutionChainListResponseComposite & {
  headers: Headers;
}

export const getEvolutionChainListUrl = (params?: EvolutionChainListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/evolution-chain/?${stringifiedParams}` : `https://pokeapi.co/api/v2/evolution-chain/`
}

export const evolutionChainList = async (params?: EvolutionChainListParams, options?: RequestInit): Promise<evolutionChainListResponse> => {
  
  const res = await fetch(getEvolutionChainListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: evolutionChainListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as evolutionChainListResponse
}



export const getEvolutionChainListQueryKey = (params?: EvolutionChainListParams,) => {
    return [`https://pokeapi.co/api/v2/evolution-chain/`, ...(params ? [params]: [])] as const;
    }

    
export const getEvolutionChainListQueryOptions = <TData = Awaited<ReturnType<typeof evolutionChainList>>, TError = unknown>(params?: EvolutionChainListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionChainList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEvolutionChainListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof evolutionChainList>>> = ({ signal }) => evolutionChainList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof evolutionChainList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EvolutionChainListQueryResult = NonNullable<Awaited<ReturnType<typeof evolutionChainList>>>
export type EvolutionChainListQueryError = unknown


export function useEvolutionChainList<TData = Awaited<ReturnType<typeof evolutionChainList>>, TError = unknown>(
 params: undefined |  EvolutionChainListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionChainList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof evolutionChainList>>,
          TError,
          Awaited<ReturnType<typeof evolutionChainList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvolutionChainList<TData = Awaited<ReturnType<typeof evolutionChainList>>, TError = unknown>(
 params?: EvolutionChainListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionChainList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof evolutionChainList>>,
          TError,
          Awaited<ReturnType<typeof evolutionChainList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvolutionChainList<TData = Awaited<ReturnType<typeof evolutionChainList>>, TError = unknown>(
 params?: EvolutionChainListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionChainList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List evolution chains
 */

export function useEvolutionChainList<TData = Awaited<ReturnType<typeof evolutionChainList>>, TError = unknown>(
 params?: EvolutionChainListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionChainList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEvolutionChainListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Evolution chains are essentially family trees. They start with the lowest stage within a family and detail evolution conditions for each as well as Pokémon they can evolve into up through the hierarchy.
 * @summary Get evolution chain
 */
export type evolutionChainRetrieveResponse200 = {
  data: EvolutionChainDetail
  status: 200
}
    
export type evolutionChainRetrieveResponseComposite = evolutionChainRetrieveResponse200;
    
export type evolutionChainRetrieveResponse = evolutionChainRetrieveResponseComposite & {
  headers: Headers;
}

export const getEvolutionChainRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/evolution-chain/${id}/`
}

export const evolutionChainRetrieve = async (id: string, options?: RequestInit): Promise<evolutionChainRetrieveResponse> => {
  
  const res = await fetch(getEvolutionChainRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: evolutionChainRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as evolutionChainRetrieveResponse
}



export const getEvolutionChainRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/evolution-chain/${id}/`] as const;
    }

    
export const getEvolutionChainRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEvolutionChainRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof evolutionChainRetrieve>>> = ({ signal }) => evolutionChainRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EvolutionChainRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof evolutionChainRetrieve>>>
export type EvolutionChainRetrieveQueryError = unknown


export function useEvolutionChainRetrieve<TData = Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof evolutionChainRetrieve>>,
          TError,
          Awaited<ReturnType<typeof evolutionChainRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvolutionChainRetrieve<TData = Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof evolutionChainRetrieve>>,
          TError,
          Awaited<ReturnType<typeof evolutionChainRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvolutionChainRetrieve<TData = Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get evolution chain
 */

export function useEvolutionChainRetrieve<TData = Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionChainRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEvolutionChainRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
 * @summary List evolution triggers
 */
export type evolutionTriggerListResponse200 = {
  data: PaginatedEvolutionTriggerSummaryList
  status: 200
}
    
export type evolutionTriggerListResponseComposite = evolutionTriggerListResponse200;
    
export type evolutionTriggerListResponse = evolutionTriggerListResponseComposite & {
  headers: Headers;
}

export const getEvolutionTriggerListUrl = (params?: EvolutionTriggerListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/evolution-trigger/?${stringifiedParams}` : `https://pokeapi.co/api/v2/evolution-trigger/`
}

export const evolutionTriggerList = async (params?: EvolutionTriggerListParams, options?: RequestInit): Promise<evolutionTriggerListResponse> => {
  
  const res = await fetch(getEvolutionTriggerListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: evolutionTriggerListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as evolutionTriggerListResponse
}



export const getEvolutionTriggerListQueryKey = (params?: EvolutionTriggerListParams,) => {
    return [`https://pokeapi.co/api/v2/evolution-trigger/`, ...(params ? [params]: [])] as const;
    }

    
export const getEvolutionTriggerListQueryOptions = <TData = Awaited<ReturnType<typeof evolutionTriggerList>>, TError = unknown>(params?: EvolutionTriggerListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEvolutionTriggerListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof evolutionTriggerList>>> = ({ signal }) => evolutionTriggerList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EvolutionTriggerListQueryResult = NonNullable<Awaited<ReturnType<typeof evolutionTriggerList>>>
export type EvolutionTriggerListQueryError = unknown


export function useEvolutionTriggerList<TData = Awaited<ReturnType<typeof evolutionTriggerList>>, TError = unknown>(
 params: undefined |  EvolutionTriggerListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof evolutionTriggerList>>,
          TError,
          Awaited<ReturnType<typeof evolutionTriggerList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvolutionTriggerList<TData = Awaited<ReturnType<typeof evolutionTriggerList>>, TError = unknown>(
 params?: EvolutionTriggerListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof evolutionTriggerList>>,
          TError,
          Awaited<ReturnType<typeof evolutionTriggerList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvolutionTriggerList<TData = Awaited<ReturnType<typeof evolutionTriggerList>>, TError = unknown>(
 params?: EvolutionTriggerListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List evolution triggers
 */

export function useEvolutionTriggerList<TData = Awaited<ReturnType<typeof evolutionTriggerList>>, TError = unknown>(
 params?: EvolutionTriggerListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEvolutionTriggerListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Evolution triggers are the events and conditions that cause a Pokémon to evolve. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Methods_of_evolution) for greater detail.
 * @summary Get evolution trigger
 */
export type evolutionTriggerRetrieveResponse200 = {
  data: EvolutionTriggerDetail
  status: 200
}
    
export type evolutionTriggerRetrieveResponseComposite = evolutionTriggerRetrieveResponse200;
    
export type evolutionTriggerRetrieveResponse = evolutionTriggerRetrieveResponseComposite & {
  headers: Headers;
}

export const getEvolutionTriggerRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/evolution-trigger/${id}/`
}

export const evolutionTriggerRetrieve = async (id: string, options?: RequestInit): Promise<evolutionTriggerRetrieveResponse> => {
  
  const res = await fetch(getEvolutionTriggerRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: evolutionTriggerRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as evolutionTriggerRetrieveResponse
}



export const getEvolutionTriggerRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/evolution-trigger/${id}/`] as const;
    }

    
export const getEvolutionTriggerRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEvolutionTriggerRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof evolutionTriggerRetrieve>>> = ({ signal }) => evolutionTriggerRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EvolutionTriggerRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof evolutionTriggerRetrieve>>>
export type EvolutionTriggerRetrieveQueryError = unknown


export function useEvolutionTriggerRetrieve<TData = Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof evolutionTriggerRetrieve>>,
          TError,
          Awaited<ReturnType<typeof evolutionTriggerRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvolutionTriggerRetrieve<TData = Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof evolutionTriggerRetrieve>>,
          TError,
          Awaited<ReturnType<typeof evolutionTriggerRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEvolutionTriggerRetrieve<TData = Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get evolution trigger
 */

export function useEvolutionTriggerRetrieve<TData = Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof evolutionTriggerRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEvolutionTriggerRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



