/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * PokéAPI
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.

## What is this?

This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.

We've covered everything from Pokémon to Berry Flavors.

## Where do I start?

We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.

This API will always be publicly available and will never require any extensive setup process to consume.

Created by [**Paul Hallett**](https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
    
 * OpenAPI spec version: 2.7.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ContestEffectDetail,
  ContestEffectListParams,
  ContestTypeDetail,
  ContestTypeListParams,
  PaginatedContestEffectSummaryList,
  PaginatedContestTypeSummaryList,
  PaginatedSuperContestEffectSummaryList,
  SuperContestEffectDetail,
  SuperContestEffectListParams
} from '.././model';





/**
 * Contest types are categories judges used to weigh a Pokémon's condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
 * @summary List contest types
 */
export type contestTypeListResponse200 = {
  data: PaginatedContestTypeSummaryList
  status: 200
}
    
export type contestTypeListResponseComposite = contestTypeListResponse200;
    
export type contestTypeListResponse = contestTypeListResponseComposite & {
  headers: Headers;
}

export const getContestTypeListUrl = (params?: ContestTypeListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/contest-type/?${stringifiedParams}` : `https://pokeapi.co/api/v2/contest-type/`
}

export const contestTypeList = async (params?: ContestTypeListParams, options?: RequestInit): Promise<contestTypeListResponse> => {
  
  const res = await fetch(getContestTypeListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: contestTypeListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as contestTypeListResponse
}



export const getContestTypeListQueryKey = (params?: ContestTypeListParams,) => {
    return [`https://pokeapi.co/api/v2/contest-type/`, ...(params ? [params]: [])] as const;
    }

    
export const getContestTypeListQueryOptions = <TData = Awaited<ReturnType<typeof contestTypeList>>, TError = unknown>(params?: ContestTypeListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestTypeList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContestTypeListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof contestTypeList>>> = ({ signal }) => contestTypeList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof contestTypeList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ContestTypeListQueryResult = NonNullable<Awaited<ReturnType<typeof contestTypeList>>>
export type ContestTypeListQueryError = unknown


export function useContestTypeList<TData = Awaited<ReturnType<typeof contestTypeList>>, TError = unknown>(
 params: undefined |  ContestTypeListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestTypeList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof contestTypeList>>,
          TError,
          Awaited<ReturnType<typeof contestTypeList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContestTypeList<TData = Awaited<ReturnType<typeof contestTypeList>>, TError = unknown>(
 params?: ContestTypeListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestTypeList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof contestTypeList>>,
          TError,
          Awaited<ReturnType<typeof contestTypeList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContestTypeList<TData = Awaited<ReturnType<typeof contestTypeList>>, TError = unknown>(
 params?: ContestTypeListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestTypeList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List contest types
 */

export function useContestTypeList<TData = Awaited<ReturnType<typeof contestTypeList>>, TError = unknown>(
 params?: ContestTypeListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestTypeList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getContestTypeListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Contest types are categories judges used to weigh a Pokémon's condition in Pokémon contests. Check out [Bulbapedia](http://bulbapedia.bulbagarden.net/wiki/Contest_condition) for greater detail.
 * @summary Get contest type
 */
export type contestTypeRetrieveResponse200 = {
  data: ContestTypeDetail
  status: 200
}
    
export type contestTypeRetrieveResponseComposite = contestTypeRetrieveResponse200;
    
export type contestTypeRetrieveResponse = contestTypeRetrieveResponseComposite & {
  headers: Headers;
}

export const getContestTypeRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/contest-type/${id}/`
}

export const contestTypeRetrieve = async (id: string, options?: RequestInit): Promise<contestTypeRetrieveResponse> => {
  
  const res = await fetch(getContestTypeRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: contestTypeRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as contestTypeRetrieveResponse
}



export const getContestTypeRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/contest-type/${id}/`] as const;
    }

    
export const getContestTypeRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof contestTypeRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestTypeRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContestTypeRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof contestTypeRetrieve>>> = ({ signal }) => contestTypeRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof contestTypeRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ContestTypeRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof contestTypeRetrieve>>>
export type ContestTypeRetrieveQueryError = unknown


export function useContestTypeRetrieve<TData = Awaited<ReturnType<typeof contestTypeRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestTypeRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof contestTypeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof contestTypeRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContestTypeRetrieve<TData = Awaited<ReturnType<typeof contestTypeRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestTypeRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof contestTypeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof contestTypeRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContestTypeRetrieve<TData = Awaited<ReturnType<typeof contestTypeRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestTypeRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get contest type
 */

export function useContestTypeRetrieve<TData = Awaited<ReturnType<typeof contestTypeRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestTypeRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getContestTypeRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Contest effects refer to the effects of moves when used in contests.
 * @summary List contest effects
 */
export type contestEffectListResponse200 = {
  data: PaginatedContestEffectSummaryList
  status: 200
}
    
export type contestEffectListResponseComposite = contestEffectListResponse200;
    
export type contestEffectListResponse = contestEffectListResponseComposite & {
  headers: Headers;
}

export const getContestEffectListUrl = (params?: ContestEffectListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/contest-effect/?${stringifiedParams}` : `https://pokeapi.co/api/v2/contest-effect/`
}

export const contestEffectList = async (params?: ContestEffectListParams, options?: RequestInit): Promise<contestEffectListResponse> => {
  
  const res = await fetch(getContestEffectListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: contestEffectListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as contestEffectListResponse
}



export const getContestEffectListQueryKey = (params?: ContestEffectListParams,) => {
    return [`https://pokeapi.co/api/v2/contest-effect/`, ...(params ? [params]: [])] as const;
    }

    
export const getContestEffectListQueryOptions = <TData = Awaited<ReturnType<typeof contestEffectList>>, TError = unknown>(params?: ContestEffectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestEffectList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContestEffectListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof contestEffectList>>> = ({ signal }) => contestEffectList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof contestEffectList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ContestEffectListQueryResult = NonNullable<Awaited<ReturnType<typeof contestEffectList>>>
export type ContestEffectListQueryError = unknown


export function useContestEffectList<TData = Awaited<ReturnType<typeof contestEffectList>>, TError = unknown>(
 params: undefined |  ContestEffectListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestEffectList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof contestEffectList>>,
          TError,
          Awaited<ReturnType<typeof contestEffectList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContestEffectList<TData = Awaited<ReturnType<typeof contestEffectList>>, TError = unknown>(
 params?: ContestEffectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestEffectList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof contestEffectList>>,
          TError,
          Awaited<ReturnType<typeof contestEffectList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContestEffectList<TData = Awaited<ReturnType<typeof contestEffectList>>, TError = unknown>(
 params?: ContestEffectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestEffectList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List contest effects
 */

export function useContestEffectList<TData = Awaited<ReturnType<typeof contestEffectList>>, TError = unknown>(
 params?: ContestEffectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestEffectList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getContestEffectListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Contest effects refer to the effects of moves when used in contests.
 * @summary Get contest effect
 */
export type contestEffectRetrieveResponse200 = {
  data: ContestEffectDetail
  status: 200
}
    
export type contestEffectRetrieveResponseComposite = contestEffectRetrieveResponse200;
    
export type contestEffectRetrieveResponse = contestEffectRetrieveResponseComposite & {
  headers: Headers;
}

export const getContestEffectRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/contest-effect/${id}/`
}

export const contestEffectRetrieve = async (id: string, options?: RequestInit): Promise<contestEffectRetrieveResponse> => {
  
  const res = await fetch(getContestEffectRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: contestEffectRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as contestEffectRetrieveResponse
}



export const getContestEffectRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/contest-effect/${id}/`] as const;
    }

    
export const getContestEffectRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof contestEffectRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestEffectRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContestEffectRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof contestEffectRetrieve>>> = ({ signal }) => contestEffectRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof contestEffectRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ContestEffectRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof contestEffectRetrieve>>>
export type ContestEffectRetrieveQueryError = unknown


export function useContestEffectRetrieve<TData = Awaited<ReturnType<typeof contestEffectRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestEffectRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof contestEffectRetrieve>>,
          TError,
          Awaited<ReturnType<typeof contestEffectRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContestEffectRetrieve<TData = Awaited<ReturnType<typeof contestEffectRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestEffectRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof contestEffectRetrieve>>,
          TError,
          Awaited<ReturnType<typeof contestEffectRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useContestEffectRetrieve<TData = Awaited<ReturnType<typeof contestEffectRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestEffectRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get contest effect
 */

export function useContestEffectRetrieve<TData = Awaited<ReturnType<typeof contestEffectRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof contestEffectRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getContestEffectRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Super contest effects refer to the effects of moves when used in super contests.
 * @summary List super contest effects
 */
export type superContestEffectListResponse200 = {
  data: PaginatedSuperContestEffectSummaryList
  status: 200
}
    
export type superContestEffectListResponseComposite = superContestEffectListResponse200;
    
export type superContestEffectListResponse = superContestEffectListResponseComposite & {
  headers: Headers;
}

export const getSuperContestEffectListUrl = (params?: SuperContestEffectListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/super-contest-effect/?${stringifiedParams}` : `https://pokeapi.co/api/v2/super-contest-effect/`
}

export const superContestEffectList = async (params?: SuperContestEffectListParams, options?: RequestInit): Promise<superContestEffectListResponse> => {
  
  const res = await fetch(getSuperContestEffectListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: superContestEffectListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as superContestEffectListResponse
}



export const getSuperContestEffectListQueryKey = (params?: SuperContestEffectListParams,) => {
    return [`https://pokeapi.co/api/v2/super-contest-effect/`, ...(params ? [params]: [])] as const;
    }

    
export const getSuperContestEffectListQueryOptions = <TData = Awaited<ReturnType<typeof superContestEffectList>>, TError = unknown>(params?: SuperContestEffectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof superContestEffectList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSuperContestEffectListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof superContestEffectList>>> = ({ signal }) => superContestEffectList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof superContestEffectList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SuperContestEffectListQueryResult = NonNullable<Awaited<ReturnType<typeof superContestEffectList>>>
export type SuperContestEffectListQueryError = unknown


export function useSuperContestEffectList<TData = Awaited<ReturnType<typeof superContestEffectList>>, TError = unknown>(
 params: undefined |  SuperContestEffectListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof superContestEffectList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof superContestEffectList>>,
          TError,
          Awaited<ReturnType<typeof superContestEffectList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSuperContestEffectList<TData = Awaited<ReturnType<typeof superContestEffectList>>, TError = unknown>(
 params?: SuperContestEffectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof superContestEffectList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof superContestEffectList>>,
          TError,
          Awaited<ReturnType<typeof superContestEffectList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSuperContestEffectList<TData = Awaited<ReturnType<typeof superContestEffectList>>, TError = unknown>(
 params?: SuperContestEffectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof superContestEffectList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List super contest effects
 */

export function useSuperContestEffectList<TData = Awaited<ReturnType<typeof superContestEffectList>>, TError = unknown>(
 params?: SuperContestEffectListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof superContestEffectList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSuperContestEffectListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Super contest effects refer to the effects of moves when used in super contests.
 * @summary Get super contest effect
 */
export type superContestEffectRetrieveResponse200 = {
  data: SuperContestEffectDetail
  status: 200
}
    
export type superContestEffectRetrieveResponseComposite = superContestEffectRetrieveResponse200;
    
export type superContestEffectRetrieveResponse = superContestEffectRetrieveResponseComposite & {
  headers: Headers;
}

export const getSuperContestEffectRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/super-contest-effect/${id}/`
}

export const superContestEffectRetrieve = async (id: string, options?: RequestInit): Promise<superContestEffectRetrieveResponse> => {
  
  const res = await fetch(getSuperContestEffectRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: superContestEffectRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as superContestEffectRetrieveResponse
}



export const getSuperContestEffectRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/super-contest-effect/${id}/`] as const;
    }

    
export const getSuperContestEffectRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSuperContestEffectRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof superContestEffectRetrieve>>> = ({ signal }) => superContestEffectRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SuperContestEffectRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof superContestEffectRetrieve>>>
export type SuperContestEffectRetrieveQueryError = unknown


export function useSuperContestEffectRetrieve<TData = Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof superContestEffectRetrieve>>,
          TError,
          Awaited<ReturnType<typeof superContestEffectRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSuperContestEffectRetrieve<TData = Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof superContestEffectRetrieve>>,
          TError,
          Awaited<ReturnType<typeof superContestEffectRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSuperContestEffectRetrieve<TData = Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get super contest effect
 */

export function useSuperContestEffectRetrieve<TData = Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof superContestEffectRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSuperContestEffectRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



