/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * PokéAPI
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.

## What is this?

This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.

We've covered everything from Pokémon to Berry Flavors.

## Where do I start?

We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.

This API will always be publicly available and will never require any extensive setup process to consume.

Created by [**Paul Hallett**](https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
    
 * OpenAPI spec version: 2.7.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  MachineDetail,
  MachineListParams,
  PaginatedMachineSummaryList
} from '.././model';





/**
 * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
 * @summary List machines
 */
export type machineListResponse200 = {
  data: PaginatedMachineSummaryList
  status: 200
}
    
export type machineListResponseComposite = machineListResponse200;
    
export type machineListResponse = machineListResponseComposite & {
  headers: Headers;
}

export const getMachineListUrl = (params?: MachineListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/machine/?${stringifiedParams}` : `https://pokeapi.co/api/v2/machine/`
}

export const machineList = async (params?: MachineListParams, options?: RequestInit): Promise<machineListResponse> => {
  
  const res = await fetch(getMachineListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: machineListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as machineListResponse
}



export const getMachineListQueryKey = (params?: MachineListParams,) => {
    return [`https://pokeapi.co/api/v2/machine/`, ...(params ? [params]: [])] as const;
    }

    
export const getMachineListQueryOptions = <TData = Awaited<ReturnType<typeof machineList>>, TError = unknown>(params?: MachineListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof machineList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMachineListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof machineList>>> = ({ signal }) => machineList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof machineList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MachineListQueryResult = NonNullable<Awaited<ReturnType<typeof machineList>>>
export type MachineListQueryError = unknown


export function useMachineList<TData = Awaited<ReturnType<typeof machineList>>, TError = unknown>(
 params: undefined |  MachineListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof machineList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof machineList>>,
          TError,
          Awaited<ReturnType<typeof machineList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMachineList<TData = Awaited<ReturnType<typeof machineList>>, TError = unknown>(
 params?: MachineListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof machineList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof machineList>>,
          TError,
          Awaited<ReturnType<typeof machineList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMachineList<TData = Awaited<ReturnType<typeof machineList>>, TError = unknown>(
 params?: MachineListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof machineList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List machines
 */

export function useMachineList<TData = Awaited<ReturnType<typeof machineList>>, TError = unknown>(
 params?: MachineListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof machineList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMachineListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Machines are the representation of items that teach moves to Pokémon. They vary from version to version, so it is not certain that one specific TM or HM corresponds to a single Machine.
 * @summary Get machine
 */
export type machineRetrieveResponse200 = {
  data: MachineDetail
  status: 200
}
    
export type machineRetrieveResponseComposite = machineRetrieveResponse200;
    
export type machineRetrieveResponse = machineRetrieveResponseComposite & {
  headers: Headers;
}

export const getMachineRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/machine/${id}/`
}

export const machineRetrieve = async (id: string, options?: RequestInit): Promise<machineRetrieveResponse> => {
  
  const res = await fetch(getMachineRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: machineRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as machineRetrieveResponse
}



export const getMachineRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/machine/${id}/`] as const;
    }

    
export const getMachineRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof machineRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof machineRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMachineRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof machineRetrieve>>> = ({ signal }) => machineRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof machineRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MachineRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof machineRetrieve>>>
export type MachineRetrieveQueryError = unknown


export function useMachineRetrieve<TData = Awaited<ReturnType<typeof machineRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof machineRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof machineRetrieve>>,
          TError,
          Awaited<ReturnType<typeof machineRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMachineRetrieve<TData = Awaited<ReturnType<typeof machineRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof machineRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof machineRetrieve>>,
          TError,
          Awaited<ReturnType<typeof machineRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMachineRetrieve<TData = Awaited<ReturnType<typeof machineRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof machineRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get machine
 */

export function useMachineRetrieve<TData = Awaited<ReturnType<typeof machineRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof machineRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMachineRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



