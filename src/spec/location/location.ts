/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * PokéAPI
 * All the Pokémon data you'll ever need in one place, easily accessible through a modern free open-source RESTful API.

## What is this?

This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.

We've covered everything from Pokémon to Berry Flavors.

## Where do I start?

We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.

This API will always be publicly available and will never require any extensive setup process to consume.

Created by [**Paul Hallett**](https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.
    
 * OpenAPI spec version: 2.7.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  LocationAreaDetail,
  LocationAreaListParams,
  LocationDetail,
  LocationListParams,
  PaginatedLocationAreaSummaryList,
  PaginatedLocationSummaryList,
  PaginatedPalParkAreaSummaryList,
  PaginatedRegionSummaryList,
  PalParkAreaDetail,
  PalParkAreaListParams,
  RegionDetail,
  RegionListParams
} from '.././model';





/**
 * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
 * @summary List locations
 */
export type locationListResponse200 = {
  data: PaginatedLocationSummaryList
  status: 200
}
    
export type locationListResponseComposite = locationListResponse200;
    
export type locationListResponse = locationListResponseComposite & {
  headers: Headers;
}

export const getLocationListUrl = (params?: LocationListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/location/?${stringifiedParams}` : `https://pokeapi.co/api/v2/location/`
}

export const locationList = async (params?: LocationListParams, options?: RequestInit): Promise<locationListResponse> => {
  
  const res = await fetch(getLocationListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: locationListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as locationListResponse
}



export const getLocationListQueryKey = (params?: LocationListParams,) => {
    return [`https://pokeapi.co/api/v2/location/`, ...(params ? [params]: [])] as const;
    }

    
export const getLocationListQueryOptions = <TData = Awaited<ReturnType<typeof locationList>>, TError = unknown>(params?: LocationListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLocationListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof locationList>>> = ({ signal }) => locationList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof locationList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type LocationListQueryResult = NonNullable<Awaited<ReturnType<typeof locationList>>>
export type LocationListQueryError = unknown


export function useLocationList<TData = Awaited<ReturnType<typeof locationList>>, TError = unknown>(
 params: undefined |  LocationListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof locationList>>,
          TError,
          Awaited<ReturnType<typeof locationList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLocationList<TData = Awaited<ReturnType<typeof locationList>>, TError = unknown>(
 params?: LocationListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof locationList>>,
          TError,
          Awaited<ReturnType<typeof locationList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLocationList<TData = Awaited<ReturnType<typeof locationList>>, TError = unknown>(
 params?: LocationListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List locations
 */

export function useLocationList<TData = Awaited<ReturnType<typeof locationList>>, TError = unknown>(
 params?: LocationListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getLocationListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Locations that can be visited within the games. Locations make up sizable portions of regions, like cities or routes.
 * @summary Get location
 */
export type locationRetrieveResponse200 = {
  data: LocationDetail
  status: 200
}
    
export type locationRetrieveResponseComposite = locationRetrieveResponse200;
    
export type locationRetrieveResponse = locationRetrieveResponseComposite & {
  headers: Headers;
}

export const getLocationRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/location/${id}/`
}

export const locationRetrieve = async (id: string, options?: RequestInit): Promise<locationRetrieveResponse> => {
  
  const res = await fetch(getLocationRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: locationRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as locationRetrieveResponse
}



export const getLocationRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/location/${id}/`] as const;
    }

    
export const getLocationRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof locationRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLocationRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof locationRetrieve>>> = ({ signal }) => locationRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof locationRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type LocationRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof locationRetrieve>>>
export type LocationRetrieveQueryError = unknown


export function useLocationRetrieve<TData = Awaited<ReturnType<typeof locationRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof locationRetrieve>>,
          TError,
          Awaited<ReturnType<typeof locationRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLocationRetrieve<TData = Awaited<ReturnType<typeof locationRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof locationRetrieve>>,
          TError,
          Awaited<ReturnType<typeof locationRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLocationRetrieve<TData = Awaited<ReturnType<typeof locationRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get location
 */

export function useLocationRetrieve<TData = Awaited<ReturnType<typeof locationRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getLocationRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
 * @summary List location areas
 */
export type locationAreaListResponse200 = {
  data: PaginatedLocationAreaSummaryList
  status: 200
}
    
export type locationAreaListResponseComposite = locationAreaListResponse200;
    
export type locationAreaListResponse = locationAreaListResponseComposite & {
  headers: Headers;
}

export const getLocationAreaListUrl = (params?: LocationAreaListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/location-area/?${stringifiedParams}` : `https://pokeapi.co/api/v2/location-area/`
}

export const locationAreaList = async (params?: LocationAreaListParams, options?: RequestInit): Promise<locationAreaListResponse> => {
  
  const res = await fetch(getLocationAreaListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: locationAreaListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as locationAreaListResponse
}



export const getLocationAreaListQueryKey = (params?: LocationAreaListParams,) => {
    return [`https://pokeapi.co/api/v2/location-area/`, ...(params ? [params]: [])] as const;
    }

    
export const getLocationAreaListQueryOptions = <TData = Awaited<ReturnType<typeof locationAreaList>>, TError = unknown>(params?: LocationAreaListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationAreaList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLocationAreaListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof locationAreaList>>> = ({ signal }) => locationAreaList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof locationAreaList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type LocationAreaListQueryResult = NonNullable<Awaited<ReturnType<typeof locationAreaList>>>
export type LocationAreaListQueryError = unknown


export function useLocationAreaList<TData = Awaited<ReturnType<typeof locationAreaList>>, TError = unknown>(
 params: undefined |  LocationAreaListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationAreaList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof locationAreaList>>,
          TError,
          Awaited<ReturnType<typeof locationAreaList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLocationAreaList<TData = Awaited<ReturnType<typeof locationAreaList>>, TError = unknown>(
 params?: LocationAreaListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationAreaList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof locationAreaList>>,
          TError,
          Awaited<ReturnType<typeof locationAreaList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLocationAreaList<TData = Awaited<ReturnType<typeof locationAreaList>>, TError = unknown>(
 params?: LocationAreaListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationAreaList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List location areas
 */

export function useLocationAreaList<TData = Awaited<ReturnType<typeof locationAreaList>>, TError = unknown>(
 params?: LocationAreaListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationAreaList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getLocationAreaListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Location areas are sections of areas, such as floors in a building or cave. Each area has its own set of possible Pokémon encounters.
 * @summary Get location area
 */
export type locationAreaRetrieveResponse200 = {
  data: LocationAreaDetail
  status: 200
}
    
export type locationAreaRetrieveResponseComposite = locationAreaRetrieveResponse200;
    
export type locationAreaRetrieveResponse = locationAreaRetrieveResponseComposite & {
  headers: Headers;
}

export const getLocationAreaRetrieveUrl = (id: number,) => {


  

  return `https://pokeapi.co/api/v2/location-area/${id}/`
}

export const locationAreaRetrieve = async (id: number, options?: RequestInit): Promise<locationAreaRetrieveResponse> => {
  
  const res = await fetch(getLocationAreaRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: locationAreaRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as locationAreaRetrieveResponse
}



export const getLocationAreaRetrieveQueryKey = (id: number,) => {
    return [`https://pokeapi.co/api/v2/location-area/${id}/`] as const;
    }

    
export const getLocationAreaRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof locationAreaRetrieve>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationAreaRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLocationAreaRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof locationAreaRetrieve>>> = ({ signal }) => locationAreaRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof locationAreaRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type LocationAreaRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof locationAreaRetrieve>>>
export type LocationAreaRetrieveQueryError = unknown


export function useLocationAreaRetrieve<TData = Awaited<ReturnType<typeof locationAreaRetrieve>>, TError = unknown>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationAreaRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof locationAreaRetrieve>>,
          TError,
          Awaited<ReturnType<typeof locationAreaRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLocationAreaRetrieve<TData = Awaited<ReturnType<typeof locationAreaRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationAreaRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof locationAreaRetrieve>>,
          TError,
          Awaited<ReturnType<typeof locationAreaRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useLocationAreaRetrieve<TData = Awaited<ReturnType<typeof locationAreaRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationAreaRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get location area
 */

export function useLocationAreaRetrieve<TData = Awaited<ReturnType<typeof locationAreaRetrieve>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof locationAreaRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getLocationAreaRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Areas used for grouping Pokémon encounters in Pal Park. They're like habitats that are specific to Pal Park.
 * @summary List pal park areas
 */
export type palParkAreaListResponse200 = {
  data: PaginatedPalParkAreaSummaryList
  status: 200
}
    
export type palParkAreaListResponseComposite = palParkAreaListResponse200;
    
export type palParkAreaListResponse = palParkAreaListResponseComposite & {
  headers: Headers;
}

export const getPalParkAreaListUrl = (params?: PalParkAreaListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/pal-park-area/?${stringifiedParams}` : `https://pokeapi.co/api/v2/pal-park-area/`
}

export const palParkAreaList = async (params?: PalParkAreaListParams, options?: RequestInit): Promise<palParkAreaListResponse> => {
  
  const res = await fetch(getPalParkAreaListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: palParkAreaListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as palParkAreaListResponse
}



export const getPalParkAreaListQueryKey = (params?: PalParkAreaListParams,) => {
    return [`https://pokeapi.co/api/v2/pal-park-area/`, ...(params ? [params]: [])] as const;
    }

    
export const getPalParkAreaListQueryOptions = <TData = Awaited<ReturnType<typeof palParkAreaList>>, TError = unknown>(params?: PalParkAreaListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof palParkAreaList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPalParkAreaListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof palParkAreaList>>> = ({ signal }) => palParkAreaList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof palParkAreaList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PalParkAreaListQueryResult = NonNullable<Awaited<ReturnType<typeof palParkAreaList>>>
export type PalParkAreaListQueryError = unknown


export function usePalParkAreaList<TData = Awaited<ReturnType<typeof palParkAreaList>>, TError = unknown>(
 params: undefined |  PalParkAreaListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof palParkAreaList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof palParkAreaList>>,
          TError,
          Awaited<ReturnType<typeof palParkAreaList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePalParkAreaList<TData = Awaited<ReturnType<typeof palParkAreaList>>, TError = unknown>(
 params?: PalParkAreaListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof palParkAreaList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof palParkAreaList>>,
          TError,
          Awaited<ReturnType<typeof palParkAreaList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePalParkAreaList<TData = Awaited<ReturnType<typeof palParkAreaList>>, TError = unknown>(
 params?: PalParkAreaListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof palParkAreaList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List pal park areas
 */

export function usePalParkAreaList<TData = Awaited<ReturnType<typeof palParkAreaList>>, TError = unknown>(
 params?: PalParkAreaListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof palParkAreaList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPalParkAreaListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Areas used for grouping Pokémon encounters in Pal Park. They're like habitats that are specific to Pal Park.
 * @summary Get pal park area
 */
export type palParkAreaRetrieveResponse200 = {
  data: PalParkAreaDetail
  status: 200
}
    
export type palParkAreaRetrieveResponseComposite = palParkAreaRetrieveResponse200;
    
export type palParkAreaRetrieveResponse = palParkAreaRetrieveResponseComposite & {
  headers: Headers;
}

export const getPalParkAreaRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/pal-park-area/${id}/`
}

export const palParkAreaRetrieve = async (id: string, options?: RequestInit): Promise<palParkAreaRetrieveResponse> => {
  
  const res = await fetch(getPalParkAreaRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: palParkAreaRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as palParkAreaRetrieveResponse
}



export const getPalParkAreaRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/pal-park-area/${id}/`] as const;
    }

    
export const getPalParkAreaRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPalParkAreaRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof palParkAreaRetrieve>>> = ({ signal }) => palParkAreaRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PalParkAreaRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof palParkAreaRetrieve>>>
export type PalParkAreaRetrieveQueryError = unknown


export function usePalParkAreaRetrieve<TData = Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof palParkAreaRetrieve>>,
          TError,
          Awaited<ReturnType<typeof palParkAreaRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePalParkAreaRetrieve<TData = Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof palParkAreaRetrieve>>,
          TError,
          Awaited<ReturnType<typeof palParkAreaRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePalParkAreaRetrieve<TData = Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get pal park area
 */

export function usePalParkAreaRetrieve<TData = Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof palParkAreaRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPalParkAreaRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
 * @summary List regions
 */
export type regionListResponse200 = {
  data: PaginatedRegionSummaryList
  status: 200
}
    
export type regionListResponseComposite = regionListResponse200;
    
export type regionListResponse = regionListResponseComposite & {
  headers: Headers;
}

export const getRegionListUrl = (params?: RegionListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://pokeapi.co/api/v2/region/?${stringifiedParams}` : `https://pokeapi.co/api/v2/region/`
}

export const regionList = async (params?: RegionListParams, options?: RequestInit): Promise<regionListResponse> => {
  
  const res = await fetch(getRegionListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: regionListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as regionListResponse
}



export const getRegionListQueryKey = (params?: RegionListParams,) => {
    return [`https://pokeapi.co/api/v2/region/`, ...(params ? [params]: [])] as const;
    }

    
export const getRegionListQueryOptions = <TData = Awaited<ReturnType<typeof regionList>>, TError = unknown>(params?: RegionListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRegionListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof regionList>>> = ({ signal }) => regionList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof regionList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RegionListQueryResult = NonNullable<Awaited<ReturnType<typeof regionList>>>
export type RegionListQueryError = unknown


export function useRegionList<TData = Awaited<ReturnType<typeof regionList>>, TError = unknown>(
 params: undefined |  RegionListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof regionList>>,
          TError,
          Awaited<ReturnType<typeof regionList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegionList<TData = Awaited<ReturnType<typeof regionList>>, TError = unknown>(
 params?: RegionListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof regionList>>,
          TError,
          Awaited<ReturnType<typeof regionList>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegionList<TData = Awaited<ReturnType<typeof regionList>>, TError = unknown>(
 params?: RegionListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List regions
 */

export function useRegionList<TData = Awaited<ReturnType<typeof regionList>>, TError = unknown>(
 params?: RegionListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionList>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRegionListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * A region is an organized area of the Pokémon world. Most often, the main difference between regions is the species of Pokémon that can be encountered within them.
 * @summary Get region
 */
export type regionRetrieveResponse200 = {
  data: RegionDetail
  status: 200
}
    
export type regionRetrieveResponseComposite = regionRetrieveResponse200;
    
export type regionRetrieveResponse = regionRetrieveResponseComposite & {
  headers: Headers;
}

export const getRegionRetrieveUrl = (id: string,) => {


  

  return `https://pokeapi.co/api/v2/region/${id}/`
}

export const regionRetrieve = async (id: string, options?: RequestInit): Promise<regionRetrieveResponse> => {
  
  const res = await fetch(getRegionRetrieveUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: regionRetrieveResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as regionRetrieveResponse
}



export const getRegionRetrieveQueryKey = (id: string,) => {
    return [`https://pokeapi.co/api/v2/region/${id}/`] as const;
    }

    
export const getRegionRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof regionRetrieve>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionRetrieve>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRegionRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof regionRetrieve>>> = ({ signal }) => regionRetrieve(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof regionRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RegionRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof regionRetrieve>>>
export type RegionRetrieveQueryError = unknown


export function useRegionRetrieve<TData = Awaited<ReturnType<typeof regionRetrieve>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof regionRetrieve>>,
          TError,
          Awaited<ReturnType<typeof regionRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegionRetrieve<TData = Awaited<ReturnType<typeof regionRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof regionRetrieve>>,
          TError,
          Awaited<ReturnType<typeof regionRetrieve>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRegionRetrieve<TData = Awaited<ReturnType<typeof regionRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get region
 */

export function useRegionRetrieve<TData = Awaited<ReturnType<typeof regionRetrieve>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof regionRetrieve>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRegionRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



